import com.github.spotbugs.snom.SpotBugsTask
import info.solidsoft.gradle.pitest.PitestTask
import org.sonarqube.gradle.SonarTask

plugins {
    id("java-library")
    id("maven-publish")
    id("signing")
    id("jacoco")
    id("com.github.spotbugs") version "5.0.14"
    id("checkstyle")
    id("pmd")
    id("org.sonarqube") version "4.0.0.2929"
    id("info.solidsoft.pitest") version "1.9.11"
    id("net.ltgt.errorprone") version "3.1.0"
}

group = "io.github.mfvanek"
version = "0.9.2-SNAPSHOT"

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withJavadocJar()
    withSourcesJar()
}
tasks.withType(JavaCompile).configureEach {
    options.errorprone.disableWarningsInGeneratedCode = true
}

repositories {
    mavenLocal()
    mavenCentral()
}

def springVersion = "2.7.12"
dependencies {
    api("io.github.mfvanek:pg-index-health:0.9.1")
    implementation("org.springframework.boot:spring-boot-starter:$springVersion")
    annotationProcessor("org.springframework.boot:spring-boot-autoconfigure-processor:$springVersion")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor:$springVersion")

    testImplementation("org.springframework.boot:spring-boot-starter-test:$springVersion")
    testImplementation(enforcedPlatform("org.junit:junit-bom:5.9.3"))
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testImplementation("org.apache.commons:commons-text:1.10.0")
    testImplementation("com.google.code.findbugs:jsr305:3.0.2")
    testImplementation("org.assertj:assertj-core:3.24.2")

    pitest("it.mulders.stryker:pit-dashboard-reporter:0.1.5")
    checkstyle("com.thomasjensen.checkstyle.addons:checkstyle-addons:7.0.1")
    errorprone("com.google.errorprone:error_prone_core:2.19.1")
}

test {
    useJUnitPlatform()
    dependsOn(checkstyleMain, checkstyleTest, pmdMain, pmdTest, spotbugsMain, spotbugsTest)
    finalizedBy(jacocoTestReport)
    finalizedBy(jacocoTestCoverageVerification)
}

jar {
    manifest {
        attributes("Implementation-Title": project.name, "Implementation-Version": project.version)
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            jar.preserveFileTimestamps = false
            jar.reproducibleFileOrder = true

            versionMapping {
                usage("java-api") {
                    fromResolutionOf("runtimeClasspath")
                }
                usage("java-runtime") {
                    fromResolutionResult()
                }
            }

            pom {
                name = project.name
                description = "Spring Boot Starter for pg-index-health library"
                url = "https://github.com/mfvanek/pg-index-health-test-starter"
                licenses {
                    license {
                        name = "Apache License Version 2.0"
                        url = "https://www.apache.org/licenses/LICENSE-2.0"
                    }
                }

                developers {
                    developer {
                        id = "mfvanek"
                        name = "Ivan Vakhrushev"
                        email = "mfvanek@gmail.com"
                    }
                }

                scm {
                    connection = "scm:git:https://github.com/mfvanek/pg-index-health-test-starter.git"
                    developerConnection = "scm:git@github.com:mfvanek/pg-index-health-test-starter.git"
                    url = "https://github.com/mfvanek/pg-index-health-test-starter"
                }
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }
}

signing {
    if (!version.endsWith("SNAPSHOT")) {
        useGpgCmd()
        sign publishing.publications.mavenJava
    }
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}

spotbugs {
    showProgress = true
    effort = "max"
    reportLevel = "low"
    excludeFilter = file("config/spotbugs/exclude.xml")
}
tasks.withType(SpotBugsTask).configureEach {
    reports {
        xml.required = true
        html.required = true
    }
}

jacocoTestReport {
    dependsOn(test)
    reports {
        xml.required = true
        html.required = true
    }
}

jacocoTestCoverageVerification {
    dependsOn(test)
    violationRules {
        rule {
            limit {
                counter = "CLASS"
                value = "MISSEDCOUNT"
                maximum = 0
            }
        }
        rule {
            limit {
                counter = "METHOD"
                value = "MISSEDCOUNT"
                maximum = 0
            }
        }
        rule {
            limit {
                counter = "LINE"
                value = "MISSEDCOUNT"
                maximum = 0
            }
        }
        rule {
            limit {
                counter = "INSTRUCTION"
                value = "COVEREDRATIO"
                minimum = 1.0
            }
        }
    }
}

checkstyle {
    toolVersion "10.7.0"
    configFile file("config/checkstyle/checkstyle.xml")
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}

check {
    dependsOn(jacocoTestReport, jacocoTestCoverageVerification)
}

pmd {
    consoleOutput = true
    toolVersion = "6.54.0"
    ruleSetFiles = files("config/pmd/pmd.xml")
    ruleSets = []
}

sonarqube {
    properties {
        property "sonar.projectKey", "mfvanek_pg-index-health-test-starter"
        property "sonar.organization", "mfvanek"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}
tasks.withType(SonarTask).configureEach {
    dependsOn(test, jacocoTestReport)
}

pitest {
    junit5PluginVersion = "1.1.2"
    pitestVersion = "1.10.4"
    threads = 4
    outputFormats = System.getenv("STRYKER_DASHBOARD_API_KEY") != null ? ["stryker-dashboard"] : ["HTML"]
    timestampedReports = false
    mutationThreshold = 100
}
tasks.withType(PitestTask).configureEach {
    mustRunAfter(test)
}

build {
    dependsOn("pitest")
}
