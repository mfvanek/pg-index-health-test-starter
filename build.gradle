plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
    id 'com.github.spotbugs' version '5.0.13'
    id 'checkstyle'
    id 'pmd'
    id 'org.sonarqube' version '3.5.0.2730'
    id 'info.solidsoft.pitest' version '1.9.11'
}

group 'io.github.mfvanek'
version '0.8.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenLocal()
    mavenCentral()
}

def springVersion = '2.7.6'
dependencies {
    implementation "org.springframework.boot:spring-boot-starter:$springVersion"
    api 'io.github.mfvanek:pg-index-health:0.7.0'
    annotationProcessor "org.springframework.boot:spring-boot-autoconfigure-processor:$springVersion"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:$springVersion"

    testImplementation "org.springframework.boot:spring-boot-starter-test:$springVersion"
    testImplementation enforcedPlatform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.apache.commons:commons-text:1.10.0'
    testImplementation 'com.google.code.findbugs:jsr305:3.0.2'

    pitest 'it.mulders.stryker:pit-dashboard-reporter:0.1.2'
    checkstyle 'com.thomasjensen.checkstyle.addons:checkstyle-addons:7.0.1'
}

test {
    useJUnitPlatform()
    dependsOn checkstyleMain, checkstyleTest, pmdMain, pmdTest, spotbugsMain, spotbugsTest
    finalizedBy jacocoTestReport
    finalizedBy jacocoTestCoverageVerification
}

jar {
    manifest {
        attributes("Implementation-Title": project.name,
                "Implementation-Version": project.version)
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            pom {
                name = project.name
                description = 'Spring Boot Starter for pg-index-health library'
                url = 'https://github.com/mfvanek/pg-index-health-test-starter'
                licenses {
                    license {
                        name = 'Apache License Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0'
                    }
                }

                developers {
                    developer {
                        id = 'mfvanek'
                        name = 'Ivan Vakhrushev'
                        email = 'mfvanek@gmail.com'
                    }
                }

                scm {
                    connection = 'scm:git:https://github.com/mfvanek/pg-index-health-test-starter.git'
                    developerConnection = 'scm:git@github.com:mfvanek/pg-index-health-test-starter.git'
                    url = 'https://github.com/mfvanek/pg-index-health-test-starter'
                }
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }
}

signing {
    if (!version.endsWith('SNAPSHOT')) {
        useGpgCmd()
        sign publishing.publications.mavenJava
    }
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

spotbugsMain {
    reports {
        html.enabled = true
    }
}

spotbugsTest {
    reports {
        html.enabled = true
    }
}

spotbugs {
    showProgress = true
    effort = 'max'
    reportLevel = 'low'
    excludeFilter = file("config/spotbugs/exclude.xml")
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        html.enabled true
    }
}

jacocoTestCoverageVerification {
    dependsOn test
    violationRules {
        rule {
            limit {
                counter = 'CLASS'
                value = 'MISSEDCOUNT'
                maximum = 0
            }
        }
        rule {
            limit {
                counter = 'METHOD'
                value = 'MISSEDCOUNT'
                maximum = 0
            }
        }
        rule {
            limit {
                counter = 'LINE'
                value = 'MISSEDCOUNT'
                maximum = 0
            }
        }
        rule {
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
        }
    }
}

checkstyle {
    toolVersion '10.5.0'
    configFile file("config/checkstyle/checkstyle.xml")
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}
checkstyleMain {
    source ='src/main/java'
}
checkstyleTest {
    source ='src/test/java'
}

check.dependsOn jacocoTestReport, jacocoTestCoverageVerification

pmd {
    consoleOutput = true
    toolVersion = '6.52.0'
    ruleSetFiles = files("config/pmd/pmd.xml")
    ruleSets = []
}

sonarqube {
    properties {
        property "sonar.projectKey", "mfvanek_pg-index-health-test-starter"
        property "sonar.organization", "mfvanek"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

pitest {
    junit5PluginVersion = '1.1.0'
    pitestVersion = '1.9.11'
    threads = 4
    outputFormats = System.getenv('STRYKER_DASHBOARD_API_KEY') != null ? ['stryker-dashboard'] : ['HTML']
    timestampedReports = false
    mutationThreshold = 100
}

tasks.named('pitest').configure {
    mustRunAfter test
}
build.dependsOn 'pitest'
